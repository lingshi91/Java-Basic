1、对象的存储：①数组（基本数据类型、 &引用数据类型）  ②集合（引用数据类型）
*数组存放的弊端*
    1.长度一旦初始化，不能改变;  
    2.真正给数组元素赋值的个数，没有现成的方法可以用
2、集合框架
Collection接口： 方法：1.**add(Object obj)**，addAll(Collection coll),size(),clear(),isEmpty();
                      2.**remove(Object obj)**,removeAll(Collection coll),retaionAll(Collection coll),equals(Object obj)：判断两个集合是否相等,contains(Object coll),
                      containsAll(Collection coll) ：是否包含另一个集合的所有元素  
                      第二类方法，要求操作的对象必须重写存储对象类的equals()方法
                      3.**iterator()**,toArray()

                      *  	Collection接口
                   	 *  				|-----**List接口：存储有序、可重复的元素    --相当于动态数组
                                新增的方法：删除 remove(int index) 修改set(int index,Object obj) 获取get(int index)  插入add(int index,Object obj)**
                                ***添加进List中的元素（对象）必须重写equals()方法***

                   	 *  							|------ArraList(主要的实现类，底层依赖数组进行实现、非线程安全)
                                      |------LinkedList(底层依赖链表实现，适用于频发插入、删除操作)
                                      |------Vector(较老、很少使用、线程安全)


                   	 *  				|-----**Set接口：存储无序、不可重复的元素**
                                Set中的方法基本是Collection接口中定义的方法。
                                1、无序性！=随机性   真正的无序性是指在底层存储的位置是无序的
		 *                          2、不可重复性  当向set中添加进相同的元素时，后添加的无法添加
                                ***添加进Set中的元素，一定样重写hashcode()和equals()方法，要求插入对象对象调用hashCode()和equals()返回值相同，保持一致。***
                                      |------HashSet（主要实现类）
                                      |------LinkedHashSet（HashSet的子类，遍历时按照元素添加顺序进行遍历，频繁的遍历，较少的添加添加、插入操作，效率较高）
                                      |------TreeSet（可以按照添加的对象的指定的属性，进行排序。）
                                              要求添加进TreeSet中的元素必须是同一类型的！
                                              两种排序方式：
                                                          自然排序：1.添加进TreeSet中的元素必须implements Comparable接口
                                                                  2.重写CompareTo(Object obj)方法，在此方法中指定按照元素哪个属性进行排序。
                                                                  3.向TreeSet中添加元素，若不实现此接口可能会报错。
                                                          定制排序：1.创建一个Comparator接口的实现类，并实现Comppare(T o1,T o2)方法
                                                                  2.在此方法中指定按照元素的哪一个属性进行排序
                                                                  3.将此方法的实现类作为参数传递给TreeSet的构造器中
                                                                  4..向TreeSet中添加元素，若不实现此接口可能会报错。
                                            ***要求重写的compareTo()或者compare()方法必须和equals()、hashCode()方法返回值保持一致***
Map接口 : 存储“键-值”对的数据
**key使用Set存放，value使用Collection存放，key-value称为Entry,Map中的entry使用Set存放
添加、修改put(Object key,Object value)  删除remove(Object key) 获取get(Object key) size()  
获取key的Set集合keySet()  获取value的Collection集合 values() 获取entry的Set集合entrySet()**

                   	  				|----------------HashMap(主要的实现类)
                              |----------------LinkedHashMap(HashMap的子类，遍历时按照添加的顺序进行遍历)
                              |----------------TreeMap(按照元素的指定属性进行排序。要求key是同一类型的。value不要求类型一致。对key考虑使用自然排序和定制排序)
                              |----------------HashTable
                                                  |------properties(用来处理属性文件)
Iterator接口：用来遍历集合

Collections工具类：操作Collection和Map的工具类，大部分为static方法     


附：properties使用：

//Properties属性配置文件
public void test6() throws FileNotFoundException, IOException{
	Properties pro = new Properties();
	pro.load(new FileInputStream(new File("jdbc.properties")));
	String user = pro.getProperty("user");
	String passwd = pro.getProperty("passwd");
	System.out.println("user:"+user+";passwd:"+passwd);
}
